using System;
using Io.Vlingo.Xoomapp.Model;
using System.Collections.Generic;
using Io.Vlingo.Xoomapp.Model.Author;
using Io.Vlingo.Xoomapp.Tests.Infrastructure.Persistence;
using Io.Vlingo.Xoomapp.Infrastructure.Persistence;
using Vlingo.Xoom.Actors;
using Vlingo.Xoom.Lattice.Model.Sourcing;
using Vlingo.Xoom.Symbio;
using Vlingo.Xoom.Symbio.Store.Journal;
using Vlingo.Xoom.Symbio.Store.Journal.InMemory;
using Xunit;

namespace Io.Vlingo.Xoomapp.Tests.Model.Author;

public class AuthorEntityTest
{

  private readonly World _world;
  private readonly IJournal<string> _journal;
  private MockDispatcher _dispatcher;
  private IAuthor _author;

  public AuthorEntityTest()
  {
    _world = World.StartWithDefaults("test-es");

    _dispatcher = new MockDispatcher();

    EntryAdapterProvider entryAdapterProvider = EntryAdapterProvider.Instance(_world);

    entryAdapterProvider.RegisterAdapter(new AuthorRegisteredAdapter());
    entryAdapterProvider.RegisterAdapter(new AuthorRankedAdapter());
    entryAdapterProvider.RegisterAdapter(new AuthorShortDescriptionChangedAdapter());

    _journal = _world.ActorFor<IJournal<string>>(typeof(InMemoryJournalActor<string>), _dispatcher);

    new SourcedTypeRegistry(_world).Register(Info.RegisterSourced(_journal, typeof(AuthorEntity)));

    _author = _world.ActorFor<IAuthor>(typeof(AuthorEntity), "#1");
  }

  private static Name NAME_FOR_WITH_NAME_TEST = Name.From("author-name-first-name", "author-name-last-name");
  private static string SHORT_DESCRIPTION_FOR_WITH_NAME_TEST = "author-short-description";

  [Fact()]
  public void WithName()
  {
    var dispatcherAccess = _dispatcher.AfterCompleting(1);
    var state = _author.WithName(NAME_FOR_WITH_NAME_TEST, SHORT_DESCRIPTION_FOR_WITH_NAME_TEST).Await();

    Assert.Equal("author-name-first-name", state.Name.FirstName);
    Assert.Equal("author-name-last-name", state.Name.LastName);
    Assert.Equal("author-short-description", state.ShortDescription);
    Assert.Equal(1, dispatcherAccess.ReadFrom<int>("statesCount"));
    Assert.Equal(state.GetType(), dispatcherAccess.ReadFrom<int, IState>("appendedStateAt", 0).Typed);
  }

  private static List<double> RANK_FOR_CHANGE_RANK_TEST = new List<double>();

  [Fact()]
  public void ChangeRank()
  {
    _createEntity();
    var dispatcherAccess = _dispatcher.AfterCompleting(1);
    var state = _author.ChangeRank(RANK_FOR_CHANGE_RANK_TEST).Await();

    Assert.Equal("author-name-first-name", state.Name.FirstName);
    Assert.Equal("author-name-last-name", state.Name.LastName);
    Assert.Equal("author-short-description", state.ShortDescription);
    Assert.NotNull(state.Rank);
    Assert.Equal(2, dispatcherAccess.ReadFrom<int>("statesCount"));
    Assert.Equal(state.GetType(), dispatcherAccess.ReadFrom<int, IState>("appendedStateAt", 0).Typed);
  }


  [Fact(Skip)]
  public void Hide()
  {
    /**
     * TODO: Unable to generate tests for method Hide. See {@link AuthorEntity#Hide()}
     */
  }

  private static Name NAME_FOR_ENTITY_CREATION = Name.From("author-name-first-name", "author-name-last-name");
  private static string SHORT_DESCRIPTION_FOR_ENTITY_CREATION = "author-short-description";

  private void _createEntity()
  {
    _author.WithName(NAME_FOR_ENTITY_CREATION, SHORT_DESCRIPTION_FOR_ENTITY_CREATION).Await();
  }
}
