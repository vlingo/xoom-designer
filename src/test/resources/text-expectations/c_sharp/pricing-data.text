using Io.Vlingo.Xoomapp.Model;

namespace Io.Vlingo.Xoomapp.Infrastructure;

public class PricingData : IEquatable<PricingData>
{

  public RetailPriceData RetailPrice {get;}
  public WholesalePriceData WholesalePrice {get;}

  public static PricingData From(Pricing pricing)
  {
    if (pricing == null)
      return PricingData.Empty;
    else
    {
      var retailPrice = pricing.RetailPrice != null ? RetailPriceData.From(pricing.RetailPrice) : null;
      var wholesalePrice = pricing.WholesalePrice != null ? WholesalePriceData.From(pricing.WholesalePrice) : null;
      return From(retailPrice, wholesalePrice);
    }
  }

  public static PricingData From(RetailPriceData retailPrice, WholesalePriceData wholesalePrice)
  {
    return new PricingData(retailPrice, wholesalePrice);
  }

  public static Set<PricingData> FromAll(Set<Pricing> correspondingObjects)
  {
    return correspondingObjects == null ? new HashSet<PricingData>() : correspondingObjects.Select(PricingData::From).ToSet();
  }

  public static List<PricingData> FromAll(List<Pricing> correspondingObjects)
  {
    return correspondingObjects == null ? new List<PricingData>() : correspondingObjects.Select(PricingData::From).ToList();
  }

  private PricingData(RetailPriceData retailPrice, WholesalePriceData wholesalePrice)
  {
    RetailPrice = retailPrice;
    WholesalePrice = wholesalePrice;
  }

  public Pricing ToPricing()
  {
    var retailPrice = RetailPrice.From(Money.From(this.RetailPrice.Price.Amount));
    var wholesalePrice = WholesalePrice.From(Money.From(this.WholesalePrice.Price.Amount));
    return Pricing.From(retailPrice, wholesalePrice);
  }

  public static PricingData Empty => new PricingData(null, null);

  public override bool Equals(object obj)
  {
    if (obj == null || obj.GetType() != GetType()) return false;

    var otherData = (PricingData) obj;
    return retailPrice == otherData.retailPrice && wholesalePrice == otherData.wholesalePrice;
  }

  public bool Equals(PricingData other) => retailPrice == other.retailPrice && wholesalePrice == other.wholesalePrice;
  public override int GetHashCode() => HashCode.Combine(retailPrice, wholesalePrice);
}
