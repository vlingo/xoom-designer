using Vlingo.Xoom.Symbio;
using Vlingo.Xoom.Symbio.Store.Object;
using Vlingo.Xoom.Wire.Nodes;

namespace Io.Vlingo.Xoomapp.Model.Author;

/**
 * See <a href="https://docs.vlingo.io/xoom-symbio/object-storage">Object Storage</a>
 */
public sealed class AuthorState : BaseEntry<string>, IEquatable<AuthorState>
{
  public String id {get; set;}
  public String name {get; set;}
  public List<Double> rank = new List<Double>();

  public static AuthorState IdentifiedBy(String id)
  {
    return new AuthorState(id, null, new List<Double>());
  }

  public AuthorState(String id, String name, List<Double> rank) : base(id, typeof(string), 1, EmptyObjectData)
  {
    this.id = id;
    this.name = name;
    this.rank.AddRange(rank);
  }

  public AuthorState withName(String name)
  {
    //TODO: Implement command logic.
    return new AuthorState(this.id, name, this.rank);
  }

  public AuthorState changeRank(List<Double> rank)
  {
    //TODO: Implement command logic.
    return new AuthorState(this.id, this.name, rank);
  }

  public AuthorState hide()
  {
    //TODO: Implement command logic.
    return new AuthorState(this.id, this.name, this.rank);
  }

  public override IEntry WithId(string id) => IdentifiedBy(id);

  public override bool Equals(object obj)
  {
    if (obj == null || obj.GetType() != GetType()) return false;

    var otherState = (AuthorState) obj;
    return id == otherState.id && name == otherState.name && rank == otherState.rank;
  }

  public bool Equals(AuthorState other) => id == other.id && name == other.name && rank == other.rank;
  public override int GetHashCode() => HashCode.Combine(id, name, rank);
}
