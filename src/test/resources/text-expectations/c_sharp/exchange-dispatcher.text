
using Io.Vlingo.Xoomapp.Model.Book.BookSoldOut;
using Io.Vlingo.Xoomapp.Model.Book.BookPurchased;
using Io.Vlingo.Xoomapp.Model.Author.AuthorRated;
using Io.Vlingo.Xoomapp.Model.Author.AuthorBlocked;

namespace Io.Vlingo.Xoomapp.Infrastructure.Exchange;

/**
 * See
 * <a href="https://docs.vlingo.io/xoom-lattice/projections#dispatcher-and-projectiondispatcher">
 *   Dispatcher and ProjectionDispatcher
 * </a>
 */
public class ExchangeDispatcher : IDispatcher<Dispatchable<Entry<string>, IState<string>>>, IConfirmDispatchedResultInterest
{
  private DispatcherControl _control;
  private Exchange _producer;
  private List<string> _outgoingEvents = new ArrayList<>();

  public ExchangeDispatcher(Exchange producer)
  {
    this.producer = producer;
    _outgoingEvents.Add(nameof(AuthorRated));
    _outgoingEvents.Add(nameof(BookSoldOut));
    _outgoingEvents.Add(nameof(BookPurchased));
    _outgoingEvents.Add(nameof(AuthorBlocked));
  }

  public void Dispatch(Dispatchable<IEntry<string>, State<string>> dispatchable)
  {
    foreach (var entry in dispatchable.Entries())
    {
      Send(JsonSerialization.Deserialized(entry.EntryData(), entry.Typed()));
    }

    _control.ConfirmDispatched(dispatchable.Id, this);
  }

  public void ConfirmDispatchedResultedIn(Result result, string dispatchId)
  {
  }

  public void ControlWith(DispatcherControl control)
  {
    this.control = control;
  }

  private void Send(Object event)
  {
    if(ShouldPublish(event))
    {
      _producer.Send(event);
    }
  }

  private bool ShouldPublish(Object event)
  {
    return _outgoingEvents.Contains(nameof(event));
  }

}
