using Io.Vlingo.Xoomapp.Infrastructure.AuthorData;
using Io.Vlingo.Xoomapp.Model.Author.AuthorEntity;
using Io.Vlingo.Xoomapp.Infrastructure.Persistence.AuthorQueriesActor;

namespace io.vlingo.xoomapp.infrastructure.resource;

[AutoDispatch(path="/authors", handlers=typeof(AuthorResourceHandlers))]
[Queries(protocol = typeof(AuthorQueries), actor = typeof(AuthorQueriesActor))]
[Model(protocol = typeof(Author), actor = typeof(AuthorEntity), data = typeof(AuthorData))
public interface AuthorResource
{

  [Route(method = POST, handler = AuthorResourceHandlers.WITH_NAME)]
  [ResponseAdapter(handler = AuthorResourceHandlers.ADAPT_STATE)]
  ICompletes<Response> withName([Body] AuthorData data);

  [Route(method = PATCH, path = "/{id}/related-author", handler = AuthorResourceHandlers.RELATE_AUTHOR)]
  [ResponseAdapter(handler = AuthorResourceHandlers.ADAPT_STATE)]
  ICompletes<Response> relateAuthor([Id] string id, [Body] AuthorData data);

  [Route(method = PATCH, path = "/{id}/related-authors", handler = AuthorResourceHandlers.RELATE_AUTHORS)]
  [ResponseAdapter(handler = AuthorResourceHandlers.ADAPT_STATE)]
  ICompletes<Response> relateAuthors([Id] string id, [Body] AuthorData data);

  [Route(method = PUT, path = "/{id}/related-authors", handler = AuthorResourceHandlers.REPLACE_ALL_RELATED_AUTHORS)]
  [ResponseAdapter(handler = AuthorResourceHandlers.ADAPT_STATE)]
  ICompletes<Response> replaceAllRelatedAuthors([Id] string id, [Body] AuthorData data);

  [Route(method = DELETE, path = "/{id}/related-author", handler = AuthorResourceHandlers.UNRELATE_AUTHOR)]
  [ResponseAdapter(handler = AuthorResourceHandlers.ADAPT_STATE)]
  ICompletes<Response> unrelateAuthor([Id] string id, [Body] AuthorData data);

  [Route(method = PATCH, path = "/{id}/tag", handler = AuthorResourceHandlers.ADD_TAG)]
  [ResponseAdapter(handler = AuthorResourceHandlers.ADAPT_STATE)]
  ICompletes<Response> addTag([Id] string id, [Body] AuthorData data);

  [Route(method = PATCH, path = "/{id}/tags", handler = AuthorResourceHandlers.ADD_TAGS)]
  [ResponseAdapter(handler = AuthorResourceHandlers.ADAPT_STATE)]
  ICompletes<Response> addTags([Id] string id, [Body] AuthorData data);

  [Route(method = PUT, path = "/{id}/tags", handler = AuthorResourceHandlers.REPLACE_TAGS)]
  [ResponseAdapter(handler = AuthorResourceHandlers.ADAPT_STATE)]
  ICompletes<Response> replaceTags([Id] string id, [Body] AuthorData data);

  [Route(method = DELETE, path = "/{id}/tags", handler = AuthorResourceHandlers.REMOVE_TAG)]
  [ResponseAdapter(handler = AuthorResourceHandlers.ADAPT_STATE)]
  ICompletes<Response> removeTag([Id] string id, [Body] AuthorData data);

  [Route(method = PATCH, path = "/{id}/rank", handler = AuthorResourceHandlers.CHANGE_RANK)]
  [ResponseAdapter(handler = AuthorResourceHandlers.ADAPT_STATE)]
  ICompletes<Response> changeRank([Id] string id, [Body] AuthorData data);

  [Route(method = GET, handler = AuthorResourceHandlers.AUTHORS)]
  ICompletes<Response> Authors();

  [Route(method = GET, path = "/{id}", handler = AuthorResourceHandlers.AUTHOR_OF)]
  ICompletes<Response> AuthorOf(string id);

}