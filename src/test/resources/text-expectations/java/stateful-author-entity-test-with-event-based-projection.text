package io.vlingo.xoomapp.model.author;

import io.vlingo.xoom.actors.World;
import io.vlingo.xoom.actors.testkit.AccessSafely;
import java.time.LocalDate;
import io.vlingo.xoom.symbio.BaseEntry;
import io.vlingo.xoomapp.infrastructure.persistence.AuthorStateAdapter;
import io.vlingo.xoomapp.infrastructure.persistence.MockDispatcher;
import java.util.*;
import io.vlingo.xoomapp.model.*;
import io.vlingo.xoom.lattice.model.stateful.StatefulTypeRegistry;
import io.vlingo.xoom.lattice.model.stateful.StatefulTypeRegistry.Info;
import io.vlingo.xoom.symbio.store.state.StateStore;
import io.vlingo.xoom.symbio.store.state.inmemory.InMemoryStateStoreActor;
import io.vlingo.xoom.symbio.StateAdapterProvider;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class AuthorEntityTest {

  private World world;
  private StateStore store;
  private MockDispatcher dispatcher;
  private Author author;

  @BeforeEach
  @SuppressWarnings({"unchecked", "rawtypes"})
  public void setUp(){
    dispatcher = new MockDispatcher();
    world = World.startWithDefaults("test-stateful");
    new StateAdapterProvider(world).registerAdapter(AuthorState.class, new AuthorStateAdapter());
    store = world.actorFor(StateStore.class, InMemoryStateStoreActor.class, Collections.singletonList(dispatcher));
    new StatefulTypeRegistry(world).register(new Info(store, AuthorState.class, AuthorState.class.getSimpleName()));
    author = world.actorFor(Author.class, AuthorEntity.class, "#1");
  }

  private static final Name NAME_FOR_WITH_NAME_TEST = Name.from("author-name-firstName", "author-name-lastName");
  private static final LocalDate AVAILABLE_ON_FOR_WITH_NAME_TEST = LocalDate.now();

  @Test
  public void withName() {
    final AccessSafely dispatcherAccess = dispatcher.afterCompleting(1);
    final AuthorState state = author.withName(NAME_FOR_WITH_NAME_TEST, AVAILABLE_ON_FOR_WITH_NAME_TEST).await();

    assertEquals("author-name-firstName", state.name.firstName);
    assertEquals("author-name-lastName", state.name.lastName);
    assertNotNull(state.availableOn);
    assertEquals(1, (int) dispatcherAccess.readFrom("entriesCount"));
    assertEquals(AuthorRegistered.class.getName(), ((BaseEntry<String>) dispatcherAccess.readFrom("appendedAt", 0)).typeName());
  }

  private static final List<Rank> RANK_FOR_CHANGE_RANK_TEST = new ArrayList<>();

  @Test
  public void changeRank() {
    _createEntity();
    final AccessSafely dispatcherAccess = dispatcher.afterCompleting(1);
    final AuthorState state = author.changeRank(RANK_FOR_CHANGE_RANK_TEST).await();

    assertEquals("author-name-firstName", state.name.firstName);
    assertEquals("author-name-lastName", state.name.lastName);
    assertNotNull(state.availableOn);
    assertNotNull(state.rank);
    assertEquals(2, (int) dispatcherAccess.readFrom("entriesCount"));
    assertEquals(AuthorRanked.class.getName(), ((BaseEntry<String>) dispatcherAccess.readFrom("appendedAt", 1)).typeName());
  }


  @Test
  public void deactivate() {
    author.deactivate().await();

  }

  private static final LocalDate AVAILABLE_ON_FOR_MAKE_AVAILABLE_ON_TEST = LocalDate.now();

  @Test
  public void makeAvailableOn() {
    final AuthorState state = author.makeAvailableOn(AVAILABLE_ON_FOR_MAKE_AVAILABLE_ON_TEST).await();

    assertEquals("author-name-firstName", state.name.firstName);
    assertEquals("author-name-lastName", state.name.lastName);
    assertNotNull(state.availableOn);
  }

  private static final Tag TAGS_FOR_ADD_TAG_TEST = Tag.from("updated-author-tags-name");

  @Test
  public void addTag() {
    _createEntity();
    final AccessSafely dispatcherAccess = dispatcher.afterCompleting(1);
    final AuthorState state = author.addTag(TAGS_FOR_ADD_TAG_TEST).await();

    assertEquals("author-name-firstName", state.name.firstName);
    assertEquals("author-name-lastName", state.name.lastName);
    assertNotNull(state.availableOn);
    assertNotNull(state.tags);
    assertEquals(2, (int) dispatcherAccess.readFrom("entriesCount"));
    assertEquals(AuthorTagged.class.getName(), ((BaseEntry<String>) dispatcherAccess.readFrom("appendedAt", 1)).typeName());
  }

  private static final List<Tag> TAGS_FOR_ADD_TAGS_TEST = new ArrayList<>();

  @Test
  public void addTags() {
    _createEntity();
    final AccessSafely dispatcherAccess = dispatcher.afterCompleting(1);
    final AuthorState state = author.addTags(TAGS_FOR_ADD_TAGS_TEST).await();

    assertEquals("author-name-firstName", state.name.firstName);
    assertEquals("author-name-lastName", state.name.lastName);
    assertNotNull(state.availableOn);
    assertNotNull(state.tags);
    assertEquals(2, (int) dispatcherAccess.readFrom("entriesCount"));
    assertEquals(AuthorBulkTagged.class.getName(), ((BaseEntry<String>) dispatcherAccess.readFrom("appendedAt", 1)).typeName());
  }

  private static final List<Tag> TAGS_FOR_REPLACE_TAGS_TEST = new ArrayList<>();

  @Test
  public void replaceTags() {
    _createEntity();
    final AccessSafely dispatcherAccess = dispatcher.afterCompleting(1);
    final AuthorState state = author.replaceTags(TAGS_FOR_REPLACE_TAGS_TEST).await();

    assertEquals("author-name-firstName", state.name.firstName);
    assertEquals("author-name-lastName", state.name.lastName);
    assertNotNull(state.availableOn);
    assertNotNull(state.tags);
    assertEquals(2, (int) dispatcherAccess.readFrom("entriesCount"));
    assertEquals(AuthorTagsReplacedEvent.class.getName(), ((BaseEntry<String>) dispatcherAccess.readFrom("appendedAt", 1)).typeName());
  }

  private static final Tag TAGS_FOR_REMOVE_TAG_TEST = Tag.from("updated-author-tags-name");

  @Test
  public void removeTag() {
    _createEntity();
    final AccessSafely dispatcherAccess = dispatcher.afterCompleting(1);
    final AuthorState state = author.removeTag(TAGS_FOR_REMOVE_TAG_TEST).await();

    assertEquals("author-name-firstName", state.name.firstName);
    assertEquals("author-name-lastName", state.name.lastName);
    assertNotNull(state.availableOn);
    assertNotNull(state.tags);
    assertEquals(2, (int) dispatcherAccess.readFrom("entriesCount"));
    assertEquals(AuthorUntagged.class.getName(), ((BaseEntry<String>) dispatcherAccess.readFrom("appendedAt", 1)).typeName());
  }

  private static final String RELATED_AUTHORS_FOR_RELATE_AUTHOR_TEST = "updated-author-relatedAuthors";

  @Test
  public void relateAuthor() {
    _createEntity();
    final AccessSafely dispatcherAccess = dispatcher.afterCompleting(1);
    final AuthorState state = author.relateAuthor(RELATED_AUTHORS_FOR_RELATE_AUTHOR_TEST).await();

    assertEquals("author-name-firstName", state.name.firstName);
    assertEquals("author-name-lastName", state.name.lastName);
    assertNotNull(state.availableOn);
    assertNotNull(state.relatedAuthors);
    assertEquals(2, (int) dispatcherAccess.readFrom("entriesCount"));
    assertEquals(AuthorRelated.class.getName(), ((BaseEntry<String>) dispatcherAccess.readFrom("appendedAt", 1)).typeName());
  }

  private static final Set<String> RELATED_AUTHORS_FOR_RELATE_AUTHORS_TEST = new HashSet<>();

  @Test
  public void relateAuthors() {
    _createEntity();
    final AccessSafely dispatcherAccess = dispatcher.afterCompleting(1);
    final AuthorState state = author.relateAuthors(RELATED_AUTHORS_FOR_RELATE_AUTHORS_TEST).await();

    assertEquals("author-name-firstName", state.name.firstName);
    assertEquals("author-name-lastName", state.name.lastName);
    assertNotNull(state.availableOn);
    assertNotNull(state.relatedAuthors);
    assertEquals(2, (int) dispatcherAccess.readFrom("entriesCount"));
    assertEquals(AuthorsRelated.class.getName(), ((BaseEntry<String>) dispatcherAccess.readFrom("appendedAt", 1)).typeName());
  }

  private static final String RELATED_AUTHORS_FOR_UNRELATE_AUTHOR_TEST = "updated-author-relatedAuthors";

  @Test
  public void unrelateAuthor() {
    _createEntity();
    final AccessSafely dispatcherAccess = dispatcher.afterCompleting(1);
    final AuthorState state = author.unrelateAuthor(RELATED_AUTHORS_FOR_UNRELATE_AUTHOR_TEST).await();

    assertEquals("author-name-firstName", state.name.firstName);
    assertEquals("author-name-lastName", state.name.lastName);
    assertNotNull(state.availableOn);
    assertNotNull(state.relatedAuthors);
    assertEquals(2, (int) dispatcherAccess.readFrom("entriesCount"));
    assertEquals(AuthorUnrelated.class.getName(), ((BaseEntry<String>) dispatcherAccess.readFrom("appendedAt", 1)).typeName());
  }

  private static final Set<String> RELATED_AUTHORS_FOR_REPLACE_ALL_RELATED_AUTHORS_TEST = new HashSet<>();

  @Test
  public void replaceAllRelatedAuthors() {
    _createEntity();
    final AccessSafely dispatcherAccess = dispatcher.afterCompleting(1);
    final AuthorState state = author.replaceAllRelatedAuthors(RELATED_AUTHORS_FOR_REPLACE_ALL_RELATED_AUTHORS_TEST).await();

    assertEquals("author-name-firstName", state.name.firstName);
    assertEquals("author-name-lastName", state.name.lastName);
    assertNotNull(state.availableOn);
    assertNotNull(state.relatedAuthors);
    assertEquals(2, (int) dispatcherAccess.readFrom("entriesCount"));
    assertEquals(RelatedAuthorsReplacedEvent.class.getName(), ((BaseEntry<String>) dispatcherAccess.readFrom("appendedAt", 1)).typeName());
  }

  private static final Name NAME_FOR_ENTITY_CREATION = Name.from("author-name-firstName", "author-name-lastName");
  private static final LocalDate AVAILABLE_ON_FOR_ENTITY_CREATION = LocalDate.now();

  private void _createEntity() {
    author.withName(NAME_FOR_ENTITY_CREATION, AVAILABLE_ON_FOR_ENTITY_CREATION).await();
  }
}
