package io.vlingo.xoomapp.infrastructure;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import io.vlingo.xoomapp.model.*;

public class RankData {

  public final int points;
  public final ClassificationData classification;

  public static RankData from(final Rank rank) {
    if (rank == null) {
      return RankData.empty();
    } else {
      final ClassificationData classification = rank.classification != null ? ClassificationData.from(rank.classification) : null;
      return from(rank.points, classification);
    }
  }

  public static RankData from(final int points, final ClassificationData classification) {
    return new RankData(points, classification);
  }

  public static Set<RankData> fromAll(final Set<Rank> correspondingObjects) {
    return correspondingObjects == null ? Collections.emptySet() : correspondingObjects.stream().map(RankData::from).collect(Collectors.toSet());
  }

  public static List<RankData> fromAll(final List<Rank> correspondingObjects) {
    return correspondingObjects == null ? Collections.emptyList() : correspondingObjects.stream().map(RankData::from).collect(Collectors.toList());
  }

  private RankData(final int points, final ClassificationData classification) {
    this.points = points;
    this.classification = classification;
  }

  public Rank toRank() {
    final Classification classification = Classification.from(this.classification.label, this.classification.stream().map(ClassifierData::toClassifier).collect(java.util.stream.Collectors.toSet()));
    return Rank.from(points, classification);
  }

  public static RankData empty() {
    return new RankData(0, null);
  }

  @Override
  public int hashCode() {
    return new HashCodeBuilder(31, 17)
              .append(points)
              .append(classification)
              .toHashCode();
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) {
      return true;
    }
    if (other == null || getClass() != other.getClass()) {
      return false;
    }
    RankData another = (RankData) other;
    return new EqualsBuilder()
              .append(this.points, another.points)
              .append(this.classification, another.classification)
              .isEquals();
  }

  @Override
  public String toString() {
    return new ToStringBuilder(this, ToStringStyle.DEFAULT_STYLE)
              .append("points", points)
              .append("classification", classification)
              .toString();
  }
}
