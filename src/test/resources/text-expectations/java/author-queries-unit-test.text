package io.vlingo.xoomapp.infrastructure.persistence;

import io.vlingo.xoom.actors.World;
import io.vlingo.xoom.common.Outcome;
import io.vlingo.xoom.lattice.model.stateful.StatefulTypeRegistry;
import io.vlingo.xoom.symbio.Source;
import io.vlingo.xoom.symbio.store.Result;
import io.vlingo.xoom.symbio.store.StorageException;
import io.vlingo.xoom.symbio.store.dispatch.NoOpDispatcher;
import io.vlingo.xoom.symbio.store.state.StateStore;
import io.vlingo.xoom.symbio.store.state.inmemory.InMemoryStateStoreActor;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.time.LocalDateTime;
import java.time.LocalDate;
import io.vlingo.xoomapp.infrastructure.*;
import java.util.*;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

public class AuthorQueriesTest {

  private World world;
  private StateStore stateStore;
  private AuthorQueries queries;

  @BeforeEach
  public void setUp(){
    world = World.startWithDefaults("test-state-store-query");
    stateStore = world.actorFor(StateStore.class, InMemoryStateStoreActor.class, Collections.singletonList(new NoOpDispatcher()));
    StatefulTypeRegistry.registerAll(world, stateStore, AuthorData.class);
    queries = world.actorFor(AuthorQueries.class, AuthorQueriesActor.class, stateStore);
  }

  private static final AuthorData FIRST_QUERY_BY_ID_TEST_DATA = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), true, LocalDate.now());
  private static final AuthorData SECOND_QUERY_BY_ID_TEST_DATA = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), true, LocalDate.now());

  @Test
  public void queryById() {
    stateStore.write("1", FIRST_QUERY_BY_ID_TEST_DATA, 1, NOOP_WRITER);
    stateStore.write("2", SECOND_QUERY_BY_ID_TEST_DATA, 1, NOOP_WRITER);

    final AuthorData firstData = queries.authorOf("1").await();

    assertEquals("1", firstData.id);
    assertEquals("first-author-name-firstName", firstData.name.firstName);
    assertEquals("first-author-name-lastName", firstData.name.lastName);
    assertNotNull(firstData.rank);
    assertEquals(true, firstData.status);
    assertNotNull(firstData.availableOn);

    final AuthorData secondData = queries.authorOf("2").await();

    assertEquals("2", secondData.id);
    assertEquals("second-author-name-firstName", secondData.name.firstName);
    assertEquals("second-author-name-lastName", secondData.name.lastName);
    assertNotNull(secondData.rank);
    assertEquals(true, secondData.status);
    assertNotNull(secondData.availableOn);
  }

  private static final AuthorData FIRST_QUERY_ALL_TEST_DATA = AuthorData.from("1", NameData.from("first-author-name-firstName", "first-author-name-lastName"), new ArrayList<>(), true, LocalDate.now());
  private static final AuthorData SECOND_QUERY_ALL_TEST_DATA = AuthorData.from("2", NameData.from("second-author-name-firstName", "second-author-name-lastName"), new ArrayList<>(), true, LocalDate.now());

  @Test
  public void queryAll() {
    stateStore.write("1", FIRST_QUERY_ALL_TEST_DATA, 1, NOOP_WRITER);
    stateStore.write("2", SECOND_QUERY_ALL_TEST_DATA, 1, NOOP_WRITER);

    final Collection<AuthorData> results = queries.authors().await();
    final AuthorData firstData = results.stream().filter(data -> data.id.equals("1")).findFirst().orElseThrow(RuntimeException::new);

    assertEquals("1", firstData.id);
    assertEquals("first-author-name-firstName", firstData.name.firstName);
    assertEquals("first-author-name-lastName", firstData.name.lastName);
    assertNotNull(firstData.rank);
    assertEquals(true, firstData.status);
    assertNotNull(firstData.availableOn);

    final AuthorData secondData = results.stream().filter(data -> data.id.equals("2")).findFirst().orElseThrow(RuntimeException::new);

    assertEquals("2", secondData.id);
    assertEquals("second-author-name-firstName", secondData.name.firstName);
    assertEquals("second-author-name-lastName", secondData.name.lastName);
    assertNotNull(secondData.rank);
    assertEquals(true, secondData.status);
    assertNotNull(secondData.availableOn);
  }

  @Test
  public void authorOfEmptyResult(){
    final AuthorData result = queries.authorOf("1").await();
    assertEquals("", result.id);
  }

  private static final StateStore.WriteResultInterest NOOP_WRITER = new StateStore.WriteResultInterest() {
    @Override
    public <S, C> void writeResultedIn(Outcome<StorageException, Result> outcome, String s, S s1, int i, List<Source<C>> list, Object o) {

    }
  };

}