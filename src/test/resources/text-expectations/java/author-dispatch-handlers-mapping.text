package io.vlingo.xoomapp.infrastructure.resource;

import io.vlingo.xoom.actors.Stage;
import io.vlingo.xoom.common.Completes;
import io.vlingo.xoom.turbo.annotation.autodispatch.Handler.Three;
import io.vlingo.xoom.turbo.annotation.autodispatch.Handler.Two;
import io.vlingo.xoom.turbo.annotation.autodispatch.HandlerEntry;

import io.vlingo.xoomapp.infrastructure.*;
import io.vlingo.xoomapp.infrastructure.persistence.AuthorQueries;
import io.vlingo.xoomapp.model.author.Author;
import io.vlingo.xoomapp.model.author.AuthorState;
import io.vlingo.xoomapp.model.*;
import java.util.Collection;

public class AuthorResourceHandlers {

  public static final int WITH_NAME = 0;
  public static final int RELATE_AUTHOR = 1;
  public static final int RELATE_AUTHORS = 2;
  public static final int REPLACE_ALL_RELATED_AUTHORS = 3;
  public static final int UNRELATE_AUTHOR = 4;
  public static final int ADD_TAG = 5;
  public static final int ADD_TAGS = 6;
  public static final int REPLACE_TAGS = 7;
  public static final int REMOVE_TAG = 8;
  public static final int CHANGE_RANK = 9;
  public static final int AUTHORS = 10;
  public static final int AUTHOR_OF = 11;
  public static final int ADAPT_STATE = 12;

  public static final HandlerEntry<Three<Completes<AuthorState>, Stage, AuthorData>> WITH_NAME_HANDLER =
          HandlerEntry.of(WITH_NAME, ($stage, data) -> {
              final Name name = Name.from(data.name.firstName, data.name.lastName);
              return Author.withName($stage, name);
          });

  public static final HandlerEntry<Three<Completes<AuthorState>, Author, AuthorData>> RELATE_AUTHOR_HANDLER =
          HandlerEntry.of(RELATE_AUTHOR, (author, data) -> {
              return author.relateAuthor(data.relatedAuthors.stream().findFirst().orElse(null));
          });

  public static final HandlerEntry<Three<Completes<AuthorState>, Author, AuthorData>> RELATE_AUTHORS_HANDLER =
          HandlerEntry.of(RELATE_AUTHORS, (author, data) -> {
              return author.relateAuthors(data.relatedAuthors);
          });

  public static final HandlerEntry<Three<Completes<AuthorState>, Author, AuthorData>> REPLACE_ALL_RELATED_AUTHORS_HANDLER =
          HandlerEntry.of(REPLACE_ALL_RELATED_AUTHORS, (author, data) -> {
              return author.replaceAllRelatedAuthors(data.relatedAuthors);
          });

  public static final HandlerEntry<Three<Completes<AuthorState>, Author, AuthorData>> UNRELATE_AUTHOR_HANDLER =
          HandlerEntry.of(UNRELATE_AUTHOR, (author, data) -> {
              return author.unrelateAuthor(data.relatedAuthors.stream().findFirst().orElse(null));
          });

  public static final HandlerEntry<Three<Completes<AuthorState>, Author, AuthorData>> ADD_TAG_HANDLER =
          HandlerEntry.of(ADD_TAG, (author, data) -> {
              return author.addTag(data.tags.stream().map(TagData::toTag).findFirst().orElse(null));
          });

  public static final HandlerEntry<Three<Completes<AuthorState>, Author, AuthorData>> ADD_TAGS_HANDLER =
          HandlerEntry.of(ADD_TAGS, (author, data) -> {
              return author.addTags(data.tags.stream().map(TagData::toTag).collect(java.util.stream.Collectors.toList()));
          });

  public static final HandlerEntry<Three<Completes<AuthorState>, Author, AuthorData>> REPLACE_TAGS_HANDLER =
          HandlerEntry.of(REPLACE_TAGS, (author, data) -> {
              return author.replaceTags(data.tags.stream().map(TagData::toTag).collect(java.util.stream.Collectors.toList()));
          });

  public static final HandlerEntry<Three<Completes<AuthorState>, Author, AuthorData>> REMOVE_TAG_HANDLER =
          HandlerEntry.of(REMOVE_TAG, (author, data) -> {
              return author.removeTag(data.tags.stream().map(TagData::toTag).findFirst().orElse(null));
          });

  public static final HandlerEntry<Three<Completes<AuthorState>, Author, AuthorData>> CHANGE_RANK_HANDLER =
          HandlerEntry.of(CHANGE_RANK, (author, data) -> {
              final Rank rank = Rank.from(data.rank.points, data.rank.classification);
              return author.changeRank(rank);
          });

  public static final HandlerEntry<Two<AuthorData, AuthorState>> ADAPT_STATE_HANDLER =
          HandlerEntry.of(ADAPT_STATE, AuthorData::from);

  public static final HandlerEntry<Two<Completes<Collection<AuthorData>>, AuthorQueries>> QUERY_ALL_HANDLER =
          HandlerEntry.of(AUTHORS, AuthorQueries::authors);

  public static final HandlerEntry<Three<Completes<AuthorData>, AuthorQueries, String>> QUERY_BY_ID_HANDLER =
          HandlerEntry.of(AUTHOR_OF, AuthorQueries::authorOf);

}